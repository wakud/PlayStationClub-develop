// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PlayStationClub.Data;

namespace PlayStationClub.Data.Migrations
{
    [DbContext(typeof(PlayStationClubDbContext))]
    [Migration("20220519192210_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CategoryGame", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("integer");

                    b.Property<int>("GamesId")
                        .HasColumnType("integer");

                    b.HasKey("CategoriesId", "GamesId");

                    b.HasIndex("GamesId");

                    b.ToTable("CategoryGame");

                    b.HasData(
                        new
                        {
                            CategoriesId = 1,
                            GamesId = 1
                        },
                        new
                        {
                            CategoriesId = 2,
                            GamesId = 3
                        },
                        new
                        {
                            CategoriesId = 2,
                            GamesId = 4
                        },
                        new
                        {
                            CategoriesId = 3,
                            GamesId = 2
                        },
                        new
                        {
                            CategoriesId = 3,
                            GamesId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "fight"
                        },
                        new
                        {
                            Id = 2,
                            Name = "sport"
                        },
                        new
                        {
                            Id = 3,
                            Name = "adventure"
                        });
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ImageId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte>("PlayersNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Новая часть культового файтинга Мортал Комбат, с привычной механикой но множеством нововведений. По мимо новых механик вас ждет обновленная графика и новые персонажи. В остальном это старый добрый МК приходи делать фаталити друзьям.",
                            ImageId = 1,
                            Name = "mortal kombat 11",
                            PlayersNumber = (byte)2
                        },
                        new
                        {
                            Id = 2,
                            Description = "Ну тут опис гри CyberPunk бла-бла-бла ...",
                            ImageId = 6,
                            Name = "CyberPunk",
                            PlayersNumber = (byte)10
                        },
                        new
                        {
                            Id = 3,
                            Description = "Ну тут опис гри FIFA2020 бла-бла-бла ...",
                            ImageId = 9,
                            Name = "FIFA2020",
                            PlayersNumber = (byte)2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Ну тут опис гри NinjaWarrior бла-бла-бла ...",
                            ImageId = 8,
                            Name = "NinjaWarrior",
                            PlayersNumber = (byte)4
                        },
                        new
                        {
                            Id = 5,
                            Description = "Ну тут опис гри IceAge бла-бла-бла ...",
                            ImageId = 7,
                            Name = "IceAge",
                            PlayersNumber = (byte)2
                        });
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FileName")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.ToTable("Images");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FileName = "game-mortal-kombat.svg"
                        },
                        new
                        {
                            Id = 2,
                            FileName = "photo-fight.png",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 4,
                            FileName = "photo-sports.png",
                            RoomId = 2
                        },
                        new
                        {
                            Id = 3,
                            FileName = "photo-race.png",
                            RoomId = 3
                        },
                        new
                        {
                            Id = 5,
                            FileName = "photo-team.png",
                            RoomId = 4
                        },
                        new
                        {
                            Id = 6,
                            FileName = "ciberpunk.jpg"
                        },
                        new
                        {
                            Id = 7,
                            FileName = "IceAge.png"
                        },
                        new
                        {
                            Id = 8,
                            FileName = "NinjaWarrior.jpg"
                        },
                        new
                        {
                            Id = 9,
                            FileName = "Pes2020.jpg"
                        },
                        new
                        {
                            Id = 10,
                            FileName = "MK-11-Aftermath.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 11,
                            FileName = "MK-11-Aftermath-10.jpg",
                            RoomId = 1
                        },
                        new
                        {
                            Id = 12,
                            FileName = "MK-11-Aftermath-12.jpg",
                            RoomId = 1
                        });
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<byte>("Rating")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Rating = (byte)5,
                            ReceivedDate = new DateTime(2022, 3, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Text = "text1"
                        },
                        new
                        {
                            Id = 2,
                            Rating = (byte)2,
                            ReceivedDate = new DateTime(2022, 3, 8, 19, 22, 0, 0, DateTimeKind.Unspecified),
                            Text = "text2"
                        });
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<byte>("PlayersNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Серьезная игра требует серьезного подхода. UFC, Assassin’s или бессмертный Mortal Kombat – выбирай то, что хочешь, и играй! 50 дюймовый экран, милитари пуфаны, 4 игрока – ничего лишнего, только суть.",
                            Name = "fight lobby",
                            PlayersNumber = (byte)4,
                            Price = 90m
                        },
                        new
                        {
                            Id = 2,
                            Description = "Удобные пуфики, атмосфера, друзья – что еще нужно? Хочешь больше? У нас есть напитки и закуски, а также многообразие вкусного табака для кальяна. Прекрасный отдых и качественную игру мы тебе гарантируем. Правило “кратность двум” - цена на комнату зависит от количества человек. Если вы играете двумя джойстиками, но вас, например шестеро, вы будете запущены на 3 джойстика Признайся, что может быть лучше футбола и пива в хорошей компании? Разве что очки виртуальной реальности с реально крутыми играми.",
                            Name = "sport lobby",
                            PlayersNumber = (byte)10,
                            Price = 165m
                        },
                        new
                        {
                            Id = 3,
                            Description = "Просторная комната с громки звуком стопроцентно подарят ощущение переполненного стадиона на твоем концерте. Кстати, ты можешь выбрать и любую другую игру, как-никак, хозяин Ferrari сам себе устанавливает правила. А еще мы предложим тебе приличный ассортимент напитков и внушительный перечень кальянов. Что еще круче – ты можешь заказать очки виртуальной реальности с классной подборкой игр. Здесь все для твоего удовольствия!",
                            Name = "race lobby",
                            PlayersNumber = (byte)6,
                            Price = 120m
                        },
                        new
                        {
                            Id = 4,
                            Description = "Идеальное место для твоей тусовки! Стильный интерьер, комфортные бинбэги, проектор Full HD и объемный звук 5.1 – все это гарантия настоящего удовольствия. Кроме того, у нас есть напитки и закуски на выбор. Вы можете заказать кальян на любой вкус прямо в комнату, что сделает отдых еще приятней. Хочешь больше драйва? Закажи в комнату Guitar Hero. Еще больше? Закажи виртуальную реальность – у нас широкая подборка игр. Тебе точно понравится!",
                            Name = "team lobby",
                            PlayersNumber = (byte)15,
                            Price = 220m
                        });
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("interval");

                    b.Property<string>("PlayStationClubUserId")
                        .HasColumnType("text");

                    b.Property<byte>("PlayerNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)1);

                    b.Property<int?>("ReviewId")
                        .HasColumnType("integer");

                    b.Property<int>("RoomId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlayStationClubUserId");

                    b.HasIndex("ReviewId")
                        .IsUnique();

                    b.HasIndex("RoomId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("PlayStationClub.Data.PlayStationClubUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ServiceSession", b =>
                {
                    b.Property<int>("ServicesId")
                        .HasColumnType("integer");

                    b.Property<int>("SessionsId")
                        .HasColumnType("integer");

                    b.HasKey("ServicesId", "SessionsId");

                    b.HasIndex("SessionsId");

                    b.ToTable("ServiceSession");
                });

            modelBuilder.Entity("CategoryGame", b =>
                {
                    b.HasOne("PlayStationClub.Data.Entity.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayStationClub.Data.Entity.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PlayStationClub.Data.PlayStationClubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PlayStationClub.Data.PlayStationClubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayStationClub.Data.PlayStationClubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PlayStationClub.Data.PlayStationClubUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Game", b =>
                {
                    b.HasOne("PlayStationClub.Data.Entity.Image", "Image")
                        .WithOne("Game")
                        .HasForeignKey("PlayStationClub.Data.Entity.Game", "ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Image", b =>
                {
                    b.HasOne("PlayStationClub.Data.Entity.Room", "Room")
                        .WithMany("Images")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Room");
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Session", b =>
                {
                    b.HasOne("PlayStationClub.Data.PlayStationClubUser", "PlayStationClubUser")
                        .WithMany("Sessions")
                        .HasForeignKey("PlayStationClubUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PlayStationClub.Data.Entity.Review", "Review")
                        .WithOne("Session")
                        .HasForeignKey("PlayStationClub.Data.Entity.Session", "ReviewId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("PlayStationClub.Data.Entity.Room", "Room")
                        .WithMany("Sessions")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlayStationClubUser");

                    b.Navigation("Review");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("ServiceSession", b =>
                {
                    b.HasOne("PlayStationClub.Data.Entity.Service", null)
                        .WithMany()
                        .HasForeignKey("ServicesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PlayStationClub.Data.Entity.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Image", b =>
                {
                    b.Navigation("Game");
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Review", b =>
                {
                    b.Navigation("Session");
                });

            modelBuilder.Entity("PlayStationClub.Data.Entity.Room", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("PlayStationClub.Data.PlayStationClubUser", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
